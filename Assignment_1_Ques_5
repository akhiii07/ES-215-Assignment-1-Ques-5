
#include <iostream>
using namespace std; 
#include <bits/stdc++.h> 
#define BILLION  1000000000.0
#include <time.h>

long long int arr[101];

void array_values(long long int arr[]){
    for(int i=0;i<101;i++){
        arr[i]=-1;
    }
}

int Recursion(int i){
    if(i==1){
        return 1;
    }
    else{
        return i*(Recursion(i-1));
    }
}

int Recursion_memo(int i){
    if(i==1){
        arr[1]=1;
        return arr[1];
    }
    else if(arr[i]==-1){
        arr[i]=i*Recursion_memo(i-1);
        return arr[i];
    }
    else{
        return arr[i];
    }
}

int main(){

    struct timespec start,end;
    
    int n=0;
    double time_spent;
    cout<<"Enter 1 for recursion:"<<endl;
    cout<<"Enter 2 for loop"<<endl;
    cout<<"Enter 3 for Recursion using memoization"<<endl;
    cout<<"Enter 4 for loop using memoization"<<endl;
    cin>>n;
    
    array_values(arr);
    
    if(n==1){
        clock_gettime(CLOCK_REALTIME,&start);
        int k=100;
        while(k!=0){
            int temp=0;
            temp=Recursion(k);
            //cout<<"Factorial of "<<k<<" is:"<<temp<<endl;
            k=k-1;
        }
        clock_gettime(CLOCK_REALTIME,&end);
        time_spent = (end.tv_sec - start.tv_sec)+(end.tv_nsec - start.tv_nsec)/BILLION ;
        cout<<"Time Spent using recursion is: "<<time_spent<<endl; 
    }
    else if(n==2){
        clock_gettime(CLOCK_REALTIME,&start);
        for(int i=1;i<=100;i++){
            int product=1;
            for(int j=1;j<i+1;j++){
                product=product*j;
            }
            //cout<<"Factorial of "<<i<<" is:"<<product<<endl;
        }
        clock_gettime(CLOCK_REALTIME,&end);
        time_spent =  (end.tv_sec - start.tv_sec)+(end.tv_nsec - start.tv_nsec)/BILLION ;
        cout<<"Time Spent using loop is: "<<time_spent<<endl;
    }
    else if(n==3){
        clock_gettime(CLOCK_REALTIME,&start);
        int product;
        for(int i=1;i<=100;i++){
            product=Recursion_memo(i);
            //cout<<"factorial of "<<i<<" is: "<<product<<endl;
        }
        clock_gettime(CLOCK_REALTIME,&end);
        time_spent =  (end.tv_sec - start.tv_sec)+(end.tv_nsec - start.tv_nsec)/BILLION ;
        cout<<"Time Spent on Recursion using memoization is: "<<time_spent<<endl;
    }
    else{
        clock_gettime(CLOCK_REALTIME,&start);
        int array[101];
        array[0]=1;
        for(int i=1;i<101;i++){
            array[i]=0;
        }
        for(int i=1;i<101;i++){
            if(array[i]==0){
                array[i]=array[i-1]*i;
            }
            else{
                array[i]=array[i];
            }
        }
        /*for(int i=1;i<101;i++){
            cout<<"Factorial of "<<i<<" is: "<<array[i]<<endl;
        }*/
        clock_gettime(CLOCK_REALTIME,&end);
        time_spent =  (end.tv_sec - start.tv_sec)+(end.tv_nsec - start.tv_nsec)/BILLION ;
        cout<<"Time Spent on loop using memoization is: "<<time_spent<<endl;
    }
    return 0;
}


